import XCTest
@testable import XRAiAssistant

/// Integration tests demonstrating that React Three Fiber code is properly injected into CodeSandbox
final class CodeSandboxIntegrationTests: XCTestCase {

    func testReactThreeFiberRainbowCodeInjection() throws {
        // This is the exact code that was generated by the AI but not properly injected
        let rainbowCode = """
        import React, { useRef } from 'react'
        import { createRoot } from 'react-dom/client'
        import { Canvas, useFrame } from '@react-three/fiber'
        import { OrbitControls } from '@react-three/drei'
        import * as THREE from 'three'

        const Rainbow = () => {
          const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']
          const segments = 7
          const radius = 2
          const arcHeight = 1

          return (
            <>
              {colors.map((color, index) => {
                const angle = (Math.PI / 2) - (Math.PI / segments * index)
                const x = radius * Math.cos(angle)
                const y = arcHeight * (index + 1) / segments
                const z = radius * Math.sin(angle)

                return (
                  <mesh key={index} position={[x, y, z]} rotation={[angle, 0, 0]}>
                    <cylinderGeometry args={[0.05, 0.05, 1, 32]} />
                    <meshStandardMaterial color={color} opacity={0.8} transparent />
                  </mesh>
                )
              })}
            </>
          )
        }

        function Scene() {
          return (
            <>
              <ambientLight intensity={0.8} />
              <directionalLight position={[2, 2, 2]} intensity={1} />
              <Rainbow />
              <OrbitControls />
            </>
          )
        }

        function App() {
          return (
            <Canvas
              style={{ width: '100%', height: '100%' }}
              camera={{ position: [0, 0, 5], fov: 75 }}
              gl={{ antialias: true }}
            >
              <Scene />
            </Canvas>
          )
        }

        const root = createRoot(document.getElementById('root')!)
        root.render(<App />)
        """

        let service = SecureCodeSandboxService()
        let sandboxURL = service.createTemplateBasedSandbox(code: rainbowCode, framework: "reactThreeFiber")

        // Verify the URL was generated
        XCTAssertFalse(sandboxURL.isEmpty, "Sandbox URL should not be empty")
        XCTAssertTrue(sandboxURL.contains("codesandbox.io"), "Should be a CodeSandbox URL")
        XCTAssertTrue(sandboxURL.contains("react-three-fiber"), "Should specify React Three Fiber template")

        // Decode and verify the content
        let decodedURL = sandboxURL.removingPercentEncoding ?? sandboxURL

        // Should contain React Three Fiber components (NOT Material-UI)
        XCTAssertTrue(decodedURL.contains("Rainbow"), "Should contain the Rainbow component")
        XCTAssertTrue(decodedURL.contains("Canvas"), "Should contain React Three Fiber Canvas")
        XCTAssertTrue(decodedURL.contains("@react-three/fiber"), "Should use React Three Fiber dependency")
        XCTAssertTrue(decodedURL.contains("@react-three/drei"), "Should use React Three Fiber Drei")
        XCTAssertTrue(decodedURL.contains("cylinderGeometry"), "Should contain 3D geometry")
        XCTAssertTrue(decodedURL.contains("meshStandardMaterial"), "Should contain 3D materials")

        // Should NOT contain Material-UI (the bug we fixed)
        XCTAssertFalse(decodedURL.contains("@material-ui"), "Should NOT contain Material-UI")
        XCTAssertFalse(decodedURL.contains("makeStyles"), "Should NOT contain Material-UI makeStyles")
        XCTAssertFalse(decodedURL.contains("List"), "Should NOT contain Material-UI List")
        XCTAssertFalse(decodedURL.contains("ListItem"), "Should NOT contain Material-UI ListItem")

        print("âœ… CodeSandbox URL generated successfully:")
        print("ðŸ“„ Content verified: Contains React Three Fiber components")
        print("ðŸš« Bug fixed: No Material-UI components present")
    }

    func testCompleteAppStructureDetection() throws {
        let completeApp = """
        import React from 'react'
        import { createRoot } from 'react-dom/client'
        import { Canvas } from '@react-three/fiber'

        function App() {
          return <Canvas><mesh><boxGeometry /></mesh></Canvas>
        }

        const root = createRoot(document.getElementById('root')!)
        root.render(<App />)
        """

        let service = SecureCodeSandboxService()
        let sandboxURL = service.createTemplateBasedSandbox(code: completeApp, framework: "reactThreeFiber")

        let decodedURL = sandboxURL.removingPercentEncoding ?? sandboxURL

        // Should use the complete app as-is (not wrap in additional App component)
        XCTAssertTrue(decodedURL.contains("createRoot"))
        XCTAssertTrue(decodedURL.contains("render(<App />)"))

        print("âœ… Complete app structure detected and preserved")
    }

    func testSceneOnlyStructureWrapping() throws {
        let sceneOnly = """
        function Scene() {
          return (
            <mesh>
              <sphereGeometry />
              <meshBasicMaterial color="blue" />
            </mesh>
          )
        }
        """

        let service = SecureCodeSandboxService()
        let sandboxURL = service.createTemplateBasedSandbox(code: sceneOnly, framework: "reactThreeFiber")

        let decodedURL = sandboxURL.removingPercentEncoding ?? sandboxURL

        // Should wrap scene-only code in App structure
        XCTAssertTrue(decodedURL.contains("sphereGeometry"))
        XCTAssertTrue(decodedURL.contains("meshBasicMaterial"))

        print("âœ… Scene-only code properly wrapped in App structure")
    }

    func testSecuritySanitization() throws {
        let maliciousCode = """
        <script>alert('hack')</script>
        function Scene() {
          eval('dangerous');
          return (
            <mesh onClick={() => document.write('bad')}>
              <boxGeometry />
            </mesh>
          )
        }
        """

        let service = SecureCodeSandboxService()
        let sandboxURL = service.createTemplateBasedSandbox(code: maliciousCode, framework: "reactThreeFiber")

        let decodedURL = sandboxURL.removingPercentEncoding ?? sandboxURL

        // Should remove dangerous content
        XCTAssertFalse(decodedURL.contains("<script>"))
        XCTAssertFalse(decodedURL.contains("eval("))
        XCTAssertFalse(decodedURL.contains("document.write"))

        // Should preserve safe React Three Fiber content
        XCTAssertTrue(decodedURL.contains("boxGeometry"))

        print("âœ… Security sanitization working correctly")
    }
}